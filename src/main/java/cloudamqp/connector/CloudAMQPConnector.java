/**
 * This file was automatically generated by the Mule Development Kit
 */
package cloudamqp.connector;
import org.mule.api.annotations.*;
import org.mule.api.annotations.param.*;
import org.mule.api.ConnectionException;
import org.mule.api.ConnectionExceptionCode;
import org.mule.api.callback.SourceCallback;

import com.rabbitmq.client.*;
import java.io.IOException;


/**
 * Cloud Connector
 *
 * @author 84codes AB
 */
@Connector(name="cloudamqp", schemaVersion="1.0-SNAPSHOT")
public class CloudAMQPConnector
{
    private ConnectionFactory factory = new ConnectionFactory();
    private Connection conn;
    private Channel channel;

    /**
     * Connect
     *
     * @param host A host name
     * @param vhost A vhost
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String host, String vhost, String username, String password)
        throws ConnectionException {
        try {
          factory.setHost(host);
          factory.setVirtualHost(vhost);
          factory.setUsername(username);
          factory.setPassword(password);
          conn = factory.newConnection();
          channel = conn.createChannel();
        } catch (Exception e) {
          throw new ConnectionException(ConnectionExceptionCode.UNKNOWN, null, null, e);
        }
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
      try {
        channel.close();
        conn.close();
      } catch (Exception e) {
      }
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
      return conn != null && conn.isOpen();
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
      return "001";
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/CloudAMQP-connector.xml.sample cloudamqp:publish-message}
     *
     * @param queue Name of the queue to publish to
     * @param message Message to be published to the queue
     * @throws IOException If message cannot be deliviered
     * @return The same message
     */
    @Processor
    public String publishMessage(String queue, @Optional @Default("#[payload]") final String message)
      throws java.io.IOException
    {
      byte[] bytes = message.getBytes();
      AMQP.BasicProperties props = new AMQP.BasicProperties.Builder()
        .contentType("text/plain")
        .deliveryMode(2)
        .build();
      channel.basicPublish("", queue, props, bytes);
      return message;
    }

    /**
     * Attempts to receive a message from the queue
     *
     * {@sample.xml ../../../doc/CloudAMQP-connector.xml.sample cloudamqp:receive-messages}
     *
     * @param queue Name of the queue to subscribe to
     * @param callback Callback to call when a new message is available.
     * @throws IOException If message cannot be received
     */
    @Source
    public void receiveMessages(String queue, final SourceCallback callback) 
      throws java.io.IOException {

      boolean durable = true;
      boolean exclusive = false;
      boolean autoDelete = false;
      channel.queueDeclare(queue, durable, exclusive, autoDelete, null);

      boolean autoAck = false;
      channel.basicConsume(queue, autoAck, "", new DefaultConsumer(channel) {
        @Override
        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
          throws java.io.IOException
        {
          long deliveryTag = envelope.getDeliveryTag();
          String message = new String(body);
          try {
            callback.process(message);
            channel.basicAck(deliveryTag, false);
          } catch (Exception e) {
            boolean requeue = false;
            channel.basicReject(deliveryTag, requeue);
          }
        }
      });
    }
}
